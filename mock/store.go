// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kamalbowselvam/chaintask/db (interfaces: GlobalRepository)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/kamalbowselvam/chaintask/db"
	domain "github.com/kamalbowselvam/chaintask/domain"
)

// MockGlobalRepository is a mock of GlobalRepository interface.
type MockGlobalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRepositoryMockRecorder
}

// MockGlobalRepositoryMockRecorder is the mock recorder for MockGlobalRepository.
type MockGlobalRepositoryMockRecorder struct {
	mock *MockGlobalRepository
}

// NewMockGlobalRepository creates a new mock instance.
func NewMockGlobalRepository(ctrl *gomock.Controller) *MockGlobalRepository {
	mock := &MockGlobalRepository{ctrl: ctrl}
	mock.recorder = &MockGlobalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRepository) EXPECT() *MockGlobalRepositoryMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockGlobalRepository) CreateCompany(arg0 context.Context, arg1 db.CreateCompanyParams) (domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", arg0, arg1)
	ret0, _ := ret[0].(domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockGlobalRepositoryMockRecorder) CreateCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockGlobalRepository)(nil).CreateCompany), arg0, arg1)
}

// CreatePayee mocks base method.
func (m *MockGlobalRepository) CreatePayee(arg0 context.Context, arg1 db.CreatePayeeParams) (domain.Payee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayee", arg0, arg1)
	ret0, _ := ret[0].(domain.Payee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayee indicates an expected call of CreatePayee.
func (mr *MockGlobalRepositoryMockRecorder) CreatePayee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayee", reflect.TypeOf((*MockGlobalRepository)(nil).CreatePayee), arg0, arg1)
}

// CreateProject mocks base method.
func (m *MockGlobalRepository) CreateProject(arg0 context.Context, arg1 db.CreateProjectParam) (domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockGlobalRepositoryMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockGlobalRepository)(nil).CreateProject), arg0, arg1)
}

// CreateResource mocks base method.
func (m *MockGlobalRepository) CreateResource(arg0 context.Context, arg1 db.CreateResourceParams) (domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", arg0, arg1)
	ret0, _ := ret[0].(domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockGlobalRepositoryMockRecorder) CreateResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockGlobalRepository)(nil).CreateResource), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockGlobalRepository) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockGlobalRepositoryMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockGlobalRepository)(nil).CreateSession), arg0, arg1)
}

// CreateTask mocks base method.
func (m *MockGlobalRepository) CreateTask(arg0 context.Context, arg1 db.CreateTaskParams) (domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockGlobalRepositoryMockRecorder) CreateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockGlobalRepository)(nil).CreateTask), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockGlobalRepository) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockGlobalRepositoryMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockGlobalRepository)(nil).CreateUser), arg0, arg1)
}

// DeleteProject mocks base method.
func (m *MockGlobalRepository) DeleteProject(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockGlobalRepositoryMockRecorder) DeleteProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockGlobalRepository)(nil).DeleteProject), arg0, arg1)
}

// DeleteTask mocks base method.
func (m *MockGlobalRepository) DeleteTask(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockGlobalRepositoryMockRecorder) DeleteTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockGlobalRepository)(nil).DeleteTask), arg0, arg1)
}

// DeleteTasksLinkedToProject mocks base method.
func (m *MockGlobalRepository) DeleteTasksLinkedToProject(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTasksLinkedToProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTasksLinkedToProject indicates an expected call of DeleteTasksLinkedToProject.
func (mr *MockGlobalRepositoryMockRecorder) DeleteTasksLinkedToProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTasksLinkedToProject", reflect.TypeOf((*MockGlobalRepository)(nil).DeleteTasksLinkedToProject), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockGlobalRepository) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockGlobalRepositoryMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockGlobalRepository)(nil).DeleteUser), arg0, arg1)
}

// GetClientAndResponsibleByProject mocks base method.
func (m *MockGlobalRepository) GetClientAndResponsibleByProject(arg0 context.Context, arg1 int64) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientAndResponsibleByProject", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClientAndResponsibleByProject indicates an expected call of GetClientAndResponsibleByProject.
func (mr *MockGlobalRepositoryMockRecorder) GetClientAndResponsibleByProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientAndResponsibleByProject", reflect.TypeOf((*MockGlobalRepository)(nil).GetClientAndResponsibleByProject), arg0, arg1)
}

// GetProject mocks base method.
func (m *MockGlobalRepository) GetProject(arg0 context.Context, arg1 int64) (domain.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(domain.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockGlobalRepositoryMockRecorder) GetProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockGlobalRepository)(nil).GetProject), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockGlobalRepository) GetSession(arg0 context.Context, arg1 uuid.UUID) (domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockGlobalRepositoryMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockGlobalRepository)(nil).GetSession), arg0, arg1)
}

// GetTask mocks base method.
func (m *MockGlobalRepository) GetTask(arg0 context.Context, arg1 int64) (domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockGlobalRepositoryMockRecorder) GetTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockGlobalRepository)(nil).GetTask), arg0, arg1)
}

// GetTaskList mocks base method.
func (m *MockGlobalRepository) GetTaskList(arg0 context.Context, arg1 []int64) ([]domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskList", arg0, arg1)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskList indicates an expected call of GetTaskList.
func (mr *MockGlobalRepositoryMockRecorder) GetTaskList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskList", reflect.TypeOf((*MockGlobalRepository)(nil).GetTaskList), arg0, arg1)
}

// GetTaskListByProject mocks base method.
func (m *MockGlobalRepository) GetTaskListByProject(arg0 context.Context, arg1 int64) ([]domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskListByProject", arg0, arg1)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskListByProject indicates an expected call of GetTaskListByProject.
func (mr *MockGlobalRepositoryMockRecorder) GetTaskListByProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskListByProject", reflect.TypeOf((*MockGlobalRepository)(nil).GetTaskListByProject), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockGlobalRepository) GetUser(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockGlobalRepositoryMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockGlobalRepository)(nil).GetUser), arg0, arg1)
}

// PayForATask mocks base method.
func (m *MockGlobalRepository) PayForATask(arg0 context.Context, arg1 db.CreateTaskPaymentParams) (domain.TaskPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayForATask", arg0, arg1)
	ret0, _ := ret[0].(domain.TaskPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayForATask indicates an expected call of PayForATask.
func (mr *MockGlobalRepositoryMockRecorder) PayForATask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayForATask", reflect.TypeOf((*MockGlobalRepository)(nil).PayForATask), arg0, arg1)
}

// UpdateTask mocks base method.
func (m *MockGlobalRepository) UpdateTask(arg0 context.Context, arg1 db.UpdateTaskParams) (domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockGlobalRepositoryMockRecorder) UpdateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockGlobalRepository)(nil).UpdateTask), arg0, arg1)
}
