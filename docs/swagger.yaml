basePath: /api/v1
definitions:
  api.createUserRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - full_name
    - password
    - role
    - username
    type: object
  api.loginUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  api.loginUserResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
      refresh_token:
        type: string
      refresh_token_expires_at:
        type: string
      session_id:
        type: string
      user:
        $ref: '#/definitions/api.userResponse'
    type: object
  api.userResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      password_changed_at:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  db.CreateProjectParam:
    properties:
      address:
        type: string
      client:
        type: string
      createdBy:
        type: string
      location:
        items:
          type: number
        type: array
      projectname:
        type: string
      responsible:
        type: string
    type: object
  db.CreateTaskParams:
    properties:
      budget:
        type: number
      createdBy:
        type: string
      projectId:
        type: integer
      taskOrder:
        type: integer
      taskname:
        type: string
    type: object
  domain.Project:
    properties:
      address:
        type: string
      budget:
        type: number
      client:
        type: string
      completion_percentage:
        type: number
      createdBy:
        type: string
      createdOn:
        type: string
      id:
        type: integer
      location:
        items:
          type: number
        type: array
      projectname:
        type: string
      responsible:
        type: string
      tasks:
        items:
          $ref: '#/definitions/domain.Task'
        type: array
    type: object
  domain.Task:
    properties:
      ProjectId:
        type: integer
      Version:
        type: integer
      budget:
        type: number
      createdBy:
        type: string
      createdOn:
        type: string
      done:
        type: boolean
      id:
        type: integer
      taskOrder:
        type: integer
      taskname:
        type: string
      updatedBy:
        type: string
      updatedOn:
        type: string
    type: object
  domain.User:
    properties:
      CreatedAt:
        type: string
      PasswordChangedAt:
        type: string
      email:
        type: string
      full_name:
        type: string
      hashed_password:
        type: string
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This a server helping organizing tasks in a chain.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger ChainTasks API
  version: "1.0"
paths:
  /projects/:
    post:
      description: create a  project
      parameters:
      - description: project creation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.CreateProjectParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Project'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a project
      tags:
      - projects
  /projects/{projectId}/tasks/:
    post:
      consumes:
      - application/json
      description: Updates a tasks
      parameters:
      - description: task update parameter
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update a Task
      tags:
      - tasks
  /projects/{projectId}/tasks/{id}:
    delete:
      description: delete a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete a Task by its ID
      tags:
      - tasks
  /projects/{projectId}/tasks/{taskId}:
    get:
      description: get a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get a Task by its ID
      tags:
      - tasks
  /users/:
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: user creation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a User
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Logs an user in
      parameters:
      - description: user creation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.loginUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Logs an user in
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
