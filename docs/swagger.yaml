basePath: /api/v1
definitions:
  api.createUserRequest:
    properties:
      company_id:
        type: integer
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      user_name:
        type: string
      user_role:
        type: string
    required:
    - company_id
    - email
    - full_name
    - password
    - user_name
    - user_role
    type: object
  api.loginUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  api.loginUserResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
      refresh_token:
        type: string
      refresh_token_expires_at:
        type: string
      session_id:
        type: string
      user:
        $ref: '#/definitions/api.userResponse'
    type: object
  api.userResponse:
    properties:
      company_id:
        type: integer
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      password_changed_at:
        type: string
      user_name:
        type: string
      user_role:
        type: string
    type: object
  db.CreateCompanyParams:
    properties:
      address:
        type: string
      company_name:
        type: string
    type: object
  db.CreateProjectParam:
    properties:
      address:
        type: string
      client:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      project_name:
        type: string
      responsible:
        type: string
    required:
    - client
    - project_name
    - responsible
    type: object
  db.CreateTaskParams:
    properties:
      budget:
        type: number
      project_id:
        type: integer
      task_name:
        type: string
      task_order:
        type: integer
    required:
    - budget
    - project_id
    - task_name
    - task_order
    type: object
  db.CreateTaskPaymentParams:
    properties:
      amount:
        type: number
      createdBy:
        type: string
      source:
        type: string
      taskIf:
        type: integer
    required:
    - amount
    - source
    - taskIf
    type: object
  db.UpdateTaskParams:
    properties:
      budget:
        type: number
      done:
        type: boolean
      id:
        type: integer
      project_id:
        type: integer
      rating:
        maximum: 5
        type: integer
      task_name:
        type: string
      task_order:
        type: integer
      version:
        type: integer
    required:
    - budget
    - done
    - project_id
    - rating
    - task_name
    - version
    type: object
  domain.Company:
    properties:
      address:
        type: string
      company_name:
        type: string
      createdBy:
        type: string
      createdOn:
        type: string
      id:
        type: integer
      updatedBy:
        type: string
      updatedOn:
        type: string
    type: object
  domain.Project:
    properties:
      address:
        type: string
      budget:
        type: number
      client:
        type: string
      company_id:
        type: integer
      completion_percentage:
        type: number
      created_by:
        type: string
      created_on:
        type: string
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      project_name:
        type: string
      responsible:
        type: string
      tasks:
        items:
          $ref: '#/definitions/domain.Task'
        type: array
    type: object
  domain.Task:
    properties:
      budget:
        type: number
      company_id:
        type: integer
      createdBy:
        type: string
      createdOn:
        type: string
      done:
        type: boolean
      id:
        type: integer
      paid_amount:
        type: number
      project_id:
        type: integer
      rating:
        type: integer
      task_name:
        type: string
      task_order:
        type: integer
      updatedBy:
        type: string
      updatedOn:
        type: string
      version:
        type: integer
    type: object
  domain.TaskPayment:
    properties:
      amount:
        type: number
      createdBy:
        type: string
      createdOn:
        type: string
      id:
        type: integer
      source:
        type: string
      task_id:
        type: integer
      updatedBy:
        type: string
      updatedOn:
        type: string
    type: object
  domain.User:
    properties:
      company_id:
        type: integer
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      hashed_password:
        type: string
      id:
        type: integer
      password_changed_at:
        type: string
      user_name:
        type: string
      user_role:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This a server helping organizing tasks in a chain.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger ChainTasks API
  version: "1.0"
paths:
  /companies:
    post:
      consumes:
      - application/json
      description: Creates a company
      parameters:
      - description: company creation parameter
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.CreateCompanyParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Company'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a company
      tags:
      - company
  /company/{companyId}/projects/:
    post:
      description: create a  project
      parameters:
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      - description: project creation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.CreateProjectParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Project'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a project
      tags:
      - projects
  /company/{companyId}/projects/{projectId}/tasks/:
    post:
      consumes:
      - application/json
      description: Create a tasks
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      - description: task creation parameter
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.CreateTaskParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a Task
      tags:
      - tasks
  /company/{companyId}/projects/{projectId}/tasks/{taskId}:
    delete:
      description: delete a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete a Task by its ID
      tags:
      - tasks
    get:
      description: get a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get a Task by its ID
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Updates a tasks
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      - description: task update parameter
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.UpdateTaskParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Task'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update a Task
      tags:
      - tasks
  /payment/{paymentId}/projects/{projectId}/pay/{taskId}:
    post:
      consumes:
      - application/json
      description: Adds a payment source and a payment amout for a task
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Company ID
        in: path
        name: companyId
        required: true
        type: integer
      - description: payment source
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.CreateTaskPaymentParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.TaskPayment'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Pay for a task
      tags:
      - tasks
  /users/:
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: user creation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a User
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Logs an user in
      parameters:
      - description: user creation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.loginUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Logs an user in
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: authorization
    type: apiKey
swagger: "2.0"
